using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

public class boardSpaceGUI : MonoBehaviour {
	void Awake(){MathStuffs MS=GetComponent<MathStuffs>();}
	
	/*public class bsmf{//redundant definition...
		public string name="";
		public string func="";
		public bool[] inputs=new bool[]{false,false,false};
		public bool[] outputs=new bool[]{false,false,false};
	}*/
	
	public float xmin=0,xmax=0,ymin=0,ymax=0,zmin=0,zmax=0;
	public int res;
	
	bool[]menus={false,false,false,false};//m[0]indicates if the menue is expanded, b[1-3] indicate which board is being worked with b[1-3] will only be changed when b[0]==true, when b[0]==true, b[1-3] are irrelivent and are cleared before being set
	bool minimize=false;
	
	bool newString=false;
	bool oldStrings=false;//GUI BOOLS
	
	public string f;
	public List<MathStuffs.bsmf>F;
	public List<bool>Fb;
	
	public string s;
	public List<string>S;
	public List<bool>Sb;
	
	public string p;
	public List<string>P;
	public List<bool>Pb;
		
	void Start () {
		P=new List<string>();
		Pb=new List<bool>();
		S=new List<string>();
		Sb=new List<bool>();
		F=new List<MathStuffs.bsmf>();
		Fb=new List<bool>();
	}
	
	// Update is called once per frame
	void Update () {
		if(newString){
			if(menus[1]){
				if(Input.GetKey(KeyCode.Backspace)){//potentially GetKeyDown/**//**//**//**/
					if(s.Length>0){
						s=s.Substring(0,s.Length-1);
					}
				}
				else if(Input.GetKeyDown(KeyCode.Return)){
					S.Add(s);
					Sb.Add(true);
					s="";
				}
				else{
					s+=Input.inputString;
				}
			}
			
			if(menus[2]){
				if(Input.GetKey(KeyCode.Backspace)){//potentially GetKeyDown/**//**//**//**/
					if(f.Length>0){
						f=f.Substring(0,f.Length-1);
					}
				}
				else if(Input.GetKeyDown(KeyCode.Return)){
					//Debug.Log(bmath(f));
					F.Add(MathStuffs.bmath(f));
					Fb.Add(true);
					f="";
				}
				else{
					f+=Input.inputString;
				}
			}
			
			if(menus[3]){
				if(Input.GetKey(KeyCode.Backspace)){//potentially GetKeyDown/**//**//**//**/
					if(p.Length>0){
						p=p.Substring(0,p.Length-1);
					}
				}
				else if(Input.GetKeyDown(KeyCode.Return)){
					P.Add(p);
					Pb.Add(true);
					p="";
				}
				else{
					p+=Input.inputString;
				}
			}
		}
	
	}
	
	void OnGUI () {
		
		if(GUI.Button (new Rect (10,10,90,30), "BoardSpace")){
			menus[0]=!menus[0];
			for(int k=1;k<menus.Length;k++){
					menus[k]=false;
				}
			minimize=true;
		}
		
		if(menus[0]){//main
			if(GUI.Button (new Rect (20,45,80,25), "Stat")){
				for(int k=0;k<menus.Length;k++){
					menus[k]=false;
				}
				minimize=false;
				menus[1]=true;
			}
			if(GUI.Button (new Rect (20,75,80,25), "Math")){
				for(int k=0;k<menus.Length;k++){
					menus[k]=false;
				}
				minimize=false;
				menus[2]=true;	
			}	
			if(GUI.Button (new Rect (20,105,80,25), "Physics")){
				for(int k=0;k<menus.Length;k++){
					menus[k]=false;
				}
				minimize=false;
				menus[3]=true;
			}
		}
		
		if(menus[1]){//stat
			if(GUI.Button(new Rect(20,45,80,25),"Stat"))
				minimize=!minimize;
			if(!minimize){
				if(GUI.Button(new Rect(20,75,70,20),"Sets"))
					oldStrings=!oldStrings;					
				if(oldStrings){
					for(int k=0;k<S.Count;k++){
						GUI.Label(new Rect(30, 90+15*k, 1000, 20), S[k]);
						if(GUI.Button(new Rect(20, 95+15*k, 5, 7),"."))Sb[k]=!Sb[k];
					}
				}
				if(GUI.Button(new Rect(95,75,70,20),"NewSet"))newString=!newString;
				if(newString){
					GUI.Label(new Rect(170,75,1000,20),s);
				}
			}
		}
		
		if(menus[2]){//math
			if(GUI.Button(new Rect(20,45,80,25),"Math"))
				minimize=!minimize;
			if(!minimize){
				if(GUI.Button(new Rect(20,75,70,20),"Functions"))
					oldStrings=!oldStrings;
				if(oldStrings){
					for(int k=0;k<F.Count;k++){
						GUI.Label(new Rect(30, 90+15*k, 1000, 20), F[k].func);
						if(GUI.Button(new Rect(20, 95+15*k, 5, 7),"."))
							Fb[k]=!Fb[k];
					}
				}
				if(GUI.Button(new Rect(95,75,70,20),"NewFunc"))newString=!newString;
				if(newString){
					GUI.Label(new Rect(170,75,1000,20),f);
				}
			}
		}
		
		if(menus[3]){//physics
			if(GUI.Button(new Rect(20,45,80,25),"Physics"))
				minimize=!minimize;
			if(!minimize){
				if(GUI.Button(new Rect(20,75,70,20),"Items"))oldStrings=!oldStrings;
				if(oldStrings){
					for(int k=0;k<P.Count;k++){
						GUI.Label(new Rect(30, 90+15*k, 1000, 20), P[k]);
						if(GUI.Button(new Rect(20, 95+15*k, 5, 7),"."))Pb[k]=!Pb[k];
					}
				}
				if(GUI.Button(new Rect(95,75,70,20),"NewItem"))newString=!newString;
				if(newString){
					GUI.Label(new Rect(170,75,1000,20),p);
				}
			}
		}
	}
}
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

public class boardSpcaeParcers : MonoBehaviour{
	
	public class bsmf{
		public string func="";
		public bool[] inputs=new bool[]{false,false,false};
		public bool[] outputs=new bool[]{false,false,false};
	}
	
	public bsmf bmath(string Usr){
		string usr=Usr;
		int k=0;
		bool kb;
		bsmf kfunc;
		kfunc=new bsmf();
		kfunc.func="public Vector3 ";
		kb=false;
		//public float f(float a,float b){float c=Mathf.Sin(a)+Mathf.Cos(b);return c;} <<example function
		while (usr[k]!='('){
			k++;
		}
		kfunc.func+=usr.Substring(0,k);
		usr=usr.Substring(k,usr.Length-k);
		k=0;
		while(usr[k]!=')'){
			if(usr[k]=='x'){
				kfunc.inputs[0]=true;
				if (kb){
					kfunc.func+=",float x";
				}
				else{
					kfunc.func+="float x";
				}
				kb=true;
			}
			if(usr[k]=='y'){
				kfunc.inputs[1]=true;
				if (kb){
					kfunc.func+=",float y";
				}
				else{
					kfunc.func+="float y";
				}
				kb=true;				
			}
			if(usr[k]=='z'){
				kfunc.inputs[2]=true;
				if (kb){
					kfunc.func+=",float z";
				}
				else{
					kfunc.func+="float z";
				}
				kb=true;
			}
		}
		while(usr[k]!='='){
			k++;
		}
		usr=usr.Substring(k+1,usr.Length-(k+1));
		usr=usr.ToLower();
		afterEquals(usr,kfunc);
		return kfunc;
	}
	
	public void afterEquals(string usr,bsmf kfunc){
		int k=0;
		string result="";
		string helper="";
		bsmf belper;
		belper=new bsmf();
		usr=usr.Replace(',',';');
		while(usr.Length>0){
			
			if((usr[0]=='x'||usr[0]=='y'||usr[0]=='z')&&usr[1]=='='){
				if(usr[0]=='x'){
					if(kfunc.outputs[1]||kfunc.outputs[2]){
						result+=';';
					}
					result+="ans.x=";
					kfunc.outputs[0]=true;
				}
				if(usr[0]=='y'){
					if(kfunc.outputs[0]||kfunc.outputs[2]){
						result+=';';
					}
					result+="ans.y=";
					kfunc.outputs[1]=true;
				}
				if(usr[0]=='z'){
					if(kfunc.outputs[0]||kfunc.outputs[1]){
						result+=';';
					}
					result+="ans.z=";
					kfunc.outputs[2]=true;
				}
				usr=usr.Substring(2,usr.Length-2);
			}
			
			if((usr[0]=='x' && kfunc.inputs[0])||(usr[0]=='y' && kfunc.inputs[1])||(usr[0]=='z' && kfunc.inputs[2])||usr[0]=='+'||usr[0]=='-'||usr[0]=='*'||usr[0]=='/'||usr[0]=='('||usr[0]==')'){
				result+=usr[0];
				usr=usr.Substring(1,usr.Length-1);
			}
			
			if(usr.Substring(0,3)=="sin"||usr.Substring(0,3)=="cos"||usr.Substring(0,3)=="tan"||usr.Substring(0,3)=="csc"||usr.Substring(0,3)=="sec"){
				result+="Mathf.";
				result+=usr[0]-32;
				result+=usr.Substring(1,3);
				usr=usr.Substring(3,usr.Length-3);
			}
			
			if(usr.Substring(0,4)=="ctan"||usr.Substring(0,4)=="asin"||usr.Substring(0,4)=="acos"||usr.Substring(0,4)=="atan"||usr.Substring(0,4)=="asec"||usr.Substring(0,4)=="acsc"){
				result+="Mathf.";
				result+=usr[0]-32;
				result+=usr.Substring(1,4);
				usr=usr.Substring(4,usr.Length-4);
			}
			
			if(usr.Substring(0,5)=="actan"){	
				result+="Mathf.";
				result+=usr[0]-32;
				result+=usr.Substring(1,5);
				usr=usr.Substring(5,usr.Length-5);
			}
			
			if(usr[0]=='^'){
				k=result.Length;
				k--;
				while(result[k]!='+' && result[k]!='-' && result[k]!='/' && result[k]!='*' && result[k]!='(' && result[k]!='=' &&k>0){
					k--;
				}
				if(result[k]=='('){
					helper=result.Substring(k,result.Length-k);
					result=result.Substring(0,k);
					result+="Mathf.Pow(";
					result+=helper;
					result+=',';
				}
				else{
					helper=result.Substring(k+1,result.Length-(k+1));
					result=result.Substring(0,k+1);
					result+="Mathf.Pow(";
					result+=helper;
					result+=',';
				}
				k=0;
				if(usr[0]=='('){
					while(usr[k]!=')'){
						k++;
					}
					helper=usr.Substring(0,k+1);
					belper=new bsmf();
					afterEquals(helper,belper);
					result+=belper.func;
					result+=')';
				}
				else{
					while(usr[k]!='+' && usr[k]!='-' && usr[k]!='/' && usr[k]!='*' && usr[k]!='='){
						k++;
					}
					if(usr[k]=='='){
						helper=usr.Substring(0,k-1);
						belper=new bsmf();
						afterEquals(helper,belper);
						result+=belper.func;
						result+=')';
					}
					else{
						helper=usr.Substring(0,k);
						belper=new bsmf();
						afterEquals(helper,belper);
						result+=belper.func;
						result+=')';
					}
				}
			}
			
			if(usr.Substring(0,2)=="pi"){
				result+="Mathf.";
				result+="PI";
				usr=usr.Substring(2,usr.Length-2);
			}
			
			if(usr[0]=='e'){
				result+="2.71828";
				usr=usr.Substring(1,usr.Length-1);
			}
		}
		kfunc.func+=result;
	}
}
